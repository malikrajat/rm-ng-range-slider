import { Component, EventEmitter, Input, Output, ViewChild, } from '@angular/core';
import { debounceTime, Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class RmNgRangeSliderComponent {
    min = 0;
    max = 100;
    leftColor = '#3498db'; // Default left color
    rightColor = '#e74c3c'; // Default right color
    leftTooltipColor = '#333'; // Default tooltip color for the left
    rightTooltipColor = '#e74c3c'; // Default tooltip color for the right
    lowSlider;
    rangeChanged = new EventEmitter();
    lowValue = 25; // Default value for the left thumb
    highValue = 75; // Default value for the right thumb
    rangeChangedSubject = new Subject();
    ngAfterViewInit() {
        this.updateSliderColors();
        // Subscribe to the debounced range change subject
        this.rangeChangedSubject.pipe(debounceTime(300) // Adjust debounce time as needed
        ).subscribe((range) => {
            this.rangeChanged.emit(range);
        });
    }
    onLowThumbChange(event) {
        let value = event.target.valueAsNumber;
        // Ensure the new low value does not exceed the high value
        if (value > this.highValue) {
            value = this.highValue;
        }
        this.lowValue = value;
        this.emitRange();
        this.updateSliderColors();
    }
    onHighThumbChange(event) {
        let value = event.target.valueAsNumber;
        // Ensure the new high value does not go below the low value
        if (value < this.lowValue) {
            value = this.lowValue;
        }
        this.highValue = value;
        this.emitRange();
        this.updateSliderColors();
    }
    emitRange() {
        this.rangeChangedSubject.next({ low: this.lowValue, high: this.highValue });
    }
    updateSliderColors() {
        const lowSlider = this.lowSlider.nativeElement;
        const percentLow = ((this.lowValue - this.min) / (this.max - this.min)) * 100;
        const percentHigh = ((this.highValue - this.min) / (this.max - this.min)) * 100;
        lowSlider.style.background = `linear-gradient(to right, ${this.leftColor} ${percentLow}%, ${this.rightColor} ${percentHigh}%)`;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: RmNgRangeSliderComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: RmNgRangeSliderComponent, isStandalone: true, selector: "rm-ng-range-slider", inputs: { min: "min", max: "max", leftColor: "leftColor", rightColor: "rightColor", leftTooltipColor: "leftTooltipColor", rightTooltipColor: "rightTooltipColor" }, outputs: { rangeChanged: "rangeChanged" }, viewQueries: [{ propertyName: "lowSlider", first: true, predicate: ["lowSlider"], descendants: true }], ngImport: i0, template: "<div class=\"slider-container\">\r\n  <input\r\n    #lowSlider\r\n    id=\"lowSlider\"\r\n    type=\"range\"\r\n    [min]=\"min\"\r\n    [max]=\"max\"\r\n    [value]=\"lowValue\"\r\n    (input)=\"onLowThumbChange($event)\"\r\n    class=\"thumb low low-thumb\"\r\n  />\r\n  <input\r\n    id=\"highSlider\"\r\n    type=\"range\"\r\n    [min]=\"min\"\r\n    [max]=\"max\"\r\n    [value]=\"highValue\"\r\n    (input)=\"onHighThumbChange($event)\"\r\n    class=\"thumb high high-thumb\"\r\n  />\r\n\r\n  <!-- Tooltip for the left thumb -->\r\n  <div\r\n    class=\"tooltip low-tooltip\"\r\n    [style.left.%]=\"(lowValue - min) / (max - min) * 100\"\r\n    [style.background]=\"leftTooltipColor\">\r\n    {{ lowValue }}\r\n  </div>\r\n\r\n  <!-- Tooltip for the right thumb -->\r\n  <div\r\n    class=\"tooltip high-tooltip\"\r\n    [style.left.%]=\"(highValue - min) / (max - min) * 100\"\r\n    [style.background]=\"rightTooltipColor\">\r\n    {{ highValue }}\r\n  </div>\r\n</div>\r\n", styles: [".slider-container{position:relative;width:100%}input[type=range]{-webkit-appearance:none;width:100%;height:6px;background:transparent;position:absolute;top:0;pointer-events:none}input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;width:20px;height:20px;background-color:#fff;border:2px solid #000;border-radius:50%;cursor:pointer;position:relative;z-index:2;pointer-events:auto}input[type=range]::-moz-range-thumb{width:20px;height:20px;background-color:#fff;border:2px solid #000;border-radius:50%;cursor:pointer;position:relative;z-index:2;pointer-events:auto}input[type=range]::-ms-thumb{width:20px;height:20px;background-color:#fff;border:2px solid #000;border-radius:50%;cursor:pointer;position:relative;z-index:2;pointer-events:auto}.tooltip{position:absolute;top:-40px;padding:5px;color:#fff;border-radius:3px;font-size:12px;white-space:nowrap;transform:translate(-50%)}\n"] });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: RmNgRangeSliderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'rm-ng-range-slider', imports: [], standalone: true, template: "<div class=\"slider-container\">\r\n  <input\r\n    #lowSlider\r\n    id=\"lowSlider\"\r\n    type=\"range\"\r\n    [min]=\"min\"\r\n    [max]=\"max\"\r\n    [value]=\"lowValue\"\r\n    (input)=\"onLowThumbChange($event)\"\r\n    class=\"thumb low low-thumb\"\r\n  />\r\n  <input\r\n    id=\"highSlider\"\r\n    type=\"range\"\r\n    [min]=\"min\"\r\n    [max]=\"max\"\r\n    [value]=\"highValue\"\r\n    (input)=\"onHighThumbChange($event)\"\r\n    class=\"thumb high high-thumb\"\r\n  />\r\n\r\n  <!-- Tooltip for the left thumb -->\r\n  <div\r\n    class=\"tooltip low-tooltip\"\r\n    [style.left.%]=\"(lowValue - min) / (max - min) * 100\"\r\n    [style.background]=\"leftTooltipColor\">\r\n    {{ lowValue }}\r\n  </div>\r\n\r\n  <!-- Tooltip for the right thumb -->\r\n  <div\r\n    class=\"tooltip high-tooltip\"\r\n    [style.left.%]=\"(highValue - min) / (max - min) * 100\"\r\n    [style.background]=\"rightTooltipColor\">\r\n    {{ highValue }}\r\n  </div>\r\n</div>\r\n", styles: [".slider-container{position:relative;width:100%}input[type=range]{-webkit-appearance:none;width:100%;height:6px;background:transparent;position:absolute;top:0;pointer-events:none}input[type=range]::-webkit-slider-thumb{-webkit-appearance:none;width:20px;height:20px;background-color:#fff;border:2px solid #000;border-radius:50%;cursor:pointer;position:relative;z-index:2;pointer-events:auto}input[type=range]::-moz-range-thumb{width:20px;height:20px;background-color:#fff;border:2px solid #000;border-radius:50%;cursor:pointer;position:relative;z-index:2;pointer-events:auto}input[type=range]::-ms-thumb{width:20px;height:20px;background-color:#fff;border:2px solid #000;border-radius:50%;cursor:pointer;position:relative;z-index:2;pointer-events:auto}.tooltip{position:absolute;top:-40px;padding:5px;color:#fff;border-radius:3px;font-size:12px;white-space:nowrap;transform:translate(-50%)}\n"] }]
        }], propDecorators: { min: [{
                type: Input
            }], max: [{
                type: Input
            }], leftColor: [{
                type: Input
            }], rightColor: [{
                type: Input
            }], leftTooltipColor: [{
                type: Input
            }], rightTooltipColor: [{
                type: Input
            }], lowSlider: [{
                type: ViewChild,
                args: ['lowSlider']
            }], rangeChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm0tbmctcmFuZ2Utc2xpZGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3Byb2plY3RzL3JtLW5nLXJhbmdlLXNsaWRlci9zcmMvbGliL3JtLW5nLXJhbmdlLXNsaWRlci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi9wcm9qZWN0cy9ybS1uZy1yYW5nZS1zbGlkZXIvc3JjL2xpYi9ybS1uZy1yYW5nZS1zbGlkZXIuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFnQixTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxHQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzVHLE9BQU8sRUFBQyxZQUFZLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQVMzQyxNQUFNLE9BQU8sd0JBQXdCO0lBQzFCLEdBQUcsR0FBVyxDQUFDLENBQUM7SUFDaEIsR0FBRyxHQUFXLEdBQUcsQ0FBQztJQUNsQixTQUFTLEdBQVcsU0FBUyxDQUFDLENBQUMscUJBQXFCO0lBQ3BELFVBQVUsR0FBVyxTQUFTLENBQUMsQ0FBQyxzQkFBc0I7SUFDdEQsZ0JBQWdCLEdBQVcsTUFBTSxDQUFDLENBQUMscUNBQXFDO0lBQ3hFLGlCQUFpQixHQUFXLFNBQVMsQ0FBQyxDQUFDLHNDQUFzQztJQUM5RCxTQUFTLENBQWM7SUFDckMsWUFBWSxHQUFnRCxJQUFJLFlBQVksRUFHbEYsQ0FBQztJQUNMLFFBQVEsR0FBVyxFQUFFLENBQUMsQ0FBQyxtQ0FBbUM7SUFDMUQsU0FBUyxHQUFXLEVBQUUsQ0FBQyxDQUFDLG9DQUFvQztJQUNwRCxtQkFBbUIsR0FBMkMsSUFBSSxPQUFPLEVBQWlDLENBQUM7SUFFbkgsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLGtEQUFrRDtRQUNsRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUMzQixZQUFZLENBQUMsR0FBRyxDQUFDLENBQUMsaUNBQWlDO1NBQ3BELENBQUMsU0FBUyxDQUFDLENBQUMsS0FBb0MsRUFBUSxFQUFFO1lBQ3pELElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGdCQUFnQixDQUFDLEtBQVk7UUFDM0IsSUFBSSxLQUFLLEdBQVksS0FBSyxDQUFDLE1BQTJCLENBQUMsYUFBYSxDQUFDO1FBQ3JFLDBEQUEwRDtRQUMxRCxJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDM0IsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDekIsQ0FBQztRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQsaUJBQWlCLENBQUMsS0FBWTtRQUM1QixJQUFJLEtBQUssR0FBWSxLQUFLLENBQUMsTUFBMkIsQ0FBQyxhQUFhLENBQUM7UUFDckUsNERBQTREO1FBQzVELElBQUksS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztZQUMxQixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUN4QixDQUFDO1FBRUQsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7SUFFRCxTQUFTO1FBQ1AsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxFQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQsa0JBQWtCO1FBQ2hCLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxDQUFDO1FBQy9DLE1BQU0sVUFBVSxHQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzdELE1BQU0sV0FBVyxHQUNmLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxDQUFDO1FBQzlELFNBQVMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLDZCQUE2QixJQUFJLENBQUMsU0FBUyxJQUFJLFVBQVUsTUFBTSxJQUFJLENBQUMsVUFBVSxJQUFJLFdBQVcsSUFBSSxDQUFDO0lBQ2pJLENBQUM7dUdBN0RVLHdCQUF3QjsyRkFBeEIsd0JBQXdCLHFZQ1pyQyx3OUJBcUNBOzsyRkR6QmEsd0JBQXdCO2tCQVBwQyxTQUFTOytCQUNFLG9CQUFvQixXQUVyQixFQUFFLGNBQ0MsSUFBSTs4QkFJUCxHQUFHO3NCQUFYLEtBQUs7Z0JBQ0csR0FBRztzQkFBWCxLQUFLO2dCQUNHLFNBQVM7c0JBQWpCLEtBQUs7Z0JBQ0csVUFBVTtzQkFBbEIsS0FBSztnQkFDRyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0csaUJBQWlCO3NCQUF6QixLQUFLO2dCQUNrQixTQUFTO3NCQUFoQyxTQUFTO3VCQUFDLFdBQVc7Z0JBQ1osWUFBWTtzQkFBckIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHtBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVmlld0NoaWxkLH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAncm0tbmctcmFuZ2Utc2xpZGVyJyxcclxuICB0ZW1wbGF0ZVVybDogJy4vcm0tbmctcmFuZ2Utc2xpZGVyLmNvbXBvbmVudC5odG1sJyxcclxuICBpbXBvcnRzOiBbXSxcclxuICBzdGFuZGFsb25lOiB0cnVlLFxyXG4gIHN0eWxlVXJsczogWycuL3JtLW5nLXJhbmdlLXNsaWRlci5jb21wb25lbnQuc2NzcyddLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUm1OZ1JhbmdlU2xpZGVyQ29tcG9uZW50IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgQElucHV0KCkgbWluOiBudW1iZXIgPSAwO1xyXG4gIEBJbnB1dCgpIG1heDogbnVtYmVyID0gMTAwO1xyXG4gIEBJbnB1dCgpIGxlZnRDb2xvcjogc3RyaW5nID0gJyMzNDk4ZGInOyAvLyBEZWZhdWx0IGxlZnQgY29sb3JcclxuICBASW5wdXQoKSByaWdodENvbG9yOiBzdHJpbmcgPSAnI2U3NGMzYyc7IC8vIERlZmF1bHQgcmlnaHQgY29sb3JcclxuICBASW5wdXQoKSBsZWZ0VG9vbHRpcENvbG9yOiBzdHJpbmcgPSAnIzMzMyc7IC8vIERlZmF1bHQgdG9vbHRpcCBjb2xvciBmb3IgdGhlIGxlZnRcclxuICBASW5wdXQoKSByaWdodFRvb2x0aXBDb2xvcjogc3RyaW5nID0gJyNlNzRjM2MnOyAvLyBEZWZhdWx0IHRvb2x0aXAgY29sb3IgZm9yIHRoZSByaWdodFxyXG4gIEBWaWV3Q2hpbGQoJ2xvd1NsaWRlcicpIGxvd1NsaWRlciE6IEVsZW1lbnRSZWY7XHJcbiAgQE91dHB1dCgpIHJhbmdlQ2hhbmdlZDogRXZlbnRFbWl0dGVyPHsgbG93OiBudW1iZXIsIGhpZ2g6IG51bWJlciB9PiA9IG5ldyBFdmVudEVtaXR0ZXI8e1xyXG4gICAgbG93OiBudW1iZXI7XHJcbiAgICBoaWdoOiBudW1iZXJcclxuICB9PigpO1xyXG4gIGxvd1ZhbHVlOiBudW1iZXIgPSAyNTsgLy8gRGVmYXVsdCB2YWx1ZSBmb3IgdGhlIGxlZnQgdGh1bWJcclxuICBoaWdoVmFsdWU6IG51bWJlciA9IDc1OyAvLyBEZWZhdWx0IHZhbHVlIGZvciB0aGUgcmlnaHQgdGh1bWJcclxuICBwcml2YXRlIHJhbmdlQ2hhbmdlZFN1YmplY3Q6IFN1YmplY3Q8eyBsb3c6IG51bWJlciwgaGlnaDogbnVtYmVyIH0+ID0gbmV3IFN1YmplY3Q8eyBsb3c6IG51bWJlciwgaGlnaDogbnVtYmVyIH0+KCk7XHJcblxyXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgIHRoaXMudXBkYXRlU2xpZGVyQ29sb3JzKCk7XHJcbiAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIGRlYm91bmNlZCByYW5nZSBjaGFuZ2Ugc3ViamVjdFxyXG4gICAgdGhpcy5yYW5nZUNoYW5nZWRTdWJqZWN0LnBpcGUoXHJcbiAgICAgIGRlYm91bmNlVGltZSgzMDApIC8vIEFkanVzdCBkZWJvdW5jZSB0aW1lIGFzIG5lZWRlZFxyXG4gICAgKS5zdWJzY3JpYmUoKHJhbmdlOiB7IGxvdzogbnVtYmVyLCBoaWdoOiBudW1iZXIgfSk6IHZvaWQgPT4ge1xyXG4gICAgICB0aGlzLnJhbmdlQ2hhbmdlZC5lbWl0KHJhbmdlKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgb25Mb3dUaHVtYkNoYW5nZShldmVudDogRXZlbnQpOiB2b2lkIHtcclxuICAgIGxldCB2YWx1ZTogbnVtYmVyID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZUFzTnVtYmVyO1xyXG4gICAgLy8gRW5zdXJlIHRoZSBuZXcgbG93IHZhbHVlIGRvZXMgbm90IGV4Y2VlZCB0aGUgaGlnaCB2YWx1ZVxyXG4gICAgaWYgKHZhbHVlID4gdGhpcy5oaWdoVmFsdWUpIHtcclxuICAgICAgdmFsdWUgPSB0aGlzLmhpZ2hWYWx1ZTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmxvd1ZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLmVtaXRSYW5nZSgpO1xyXG4gICAgdGhpcy51cGRhdGVTbGlkZXJDb2xvcnMoKTtcclxuICB9XHJcblxyXG4gIG9uSGlnaFRodW1iQ2hhbmdlKGV2ZW50OiBFdmVudCk6IHZvaWQge1xyXG4gICAgbGV0IHZhbHVlOiBudW1iZXIgPSAoZXZlbnQudGFyZ2V0IGFzIEhUTUxJbnB1dEVsZW1lbnQpLnZhbHVlQXNOdW1iZXI7XHJcbiAgICAvLyBFbnN1cmUgdGhlIG5ldyBoaWdoIHZhbHVlIGRvZXMgbm90IGdvIGJlbG93IHRoZSBsb3cgdmFsdWVcclxuICAgIGlmICh2YWx1ZSA8IHRoaXMubG93VmFsdWUpIHtcclxuICAgICAgdmFsdWUgPSB0aGlzLmxvd1ZhbHVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuaGlnaFZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLmVtaXRSYW5nZSgpO1xyXG4gICAgdGhpcy51cGRhdGVTbGlkZXJDb2xvcnMoKTtcclxuICB9XHJcblxyXG4gIGVtaXRSYW5nZSgpOiB2b2lkIHtcclxuICAgIHRoaXMucmFuZ2VDaGFuZ2VkU3ViamVjdC5uZXh0KHtsb3c6IHRoaXMubG93VmFsdWUsIGhpZ2g6IHRoaXMuaGlnaFZhbHVlfSk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVTbGlkZXJDb2xvcnMoKTogdm9pZCB7XHJcbiAgICBjb25zdCBsb3dTbGlkZXIgPSB0aGlzLmxvd1NsaWRlci5uYXRpdmVFbGVtZW50O1xyXG4gICAgY29uc3QgcGVyY2VudExvdzogbnVtYmVyID1cclxuICAgICAgKCh0aGlzLmxvd1ZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKSAqIDEwMDtcclxuICAgIGNvbnN0IHBlcmNlbnRIaWdoOiBudW1iZXIgPVxyXG4gICAgICAoKHRoaXMuaGlnaFZhbHVlIC0gdGhpcy5taW4pIC8gKHRoaXMubWF4IC0gdGhpcy5taW4pKSAqIDEwMDtcclxuICAgIGxvd1NsaWRlci5zdHlsZS5iYWNrZ3JvdW5kID0gYGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgJHt0aGlzLmxlZnRDb2xvcn0gJHtwZXJjZW50TG93fSUsICR7dGhpcy5yaWdodENvbG9yfSAke3BlcmNlbnRIaWdofSUpYDtcclxuICB9XHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cInNsaWRlci1jb250YWluZXJcIj5cclxuICA8aW5wdXRcclxuICAgICNsb3dTbGlkZXJcclxuICAgIGlkPVwibG93U2xpZGVyXCJcclxuICAgIHR5cGU9XCJyYW5nZVwiXHJcbiAgICBbbWluXT1cIm1pblwiXHJcbiAgICBbbWF4XT1cIm1heFwiXHJcbiAgICBbdmFsdWVdPVwibG93VmFsdWVcIlxyXG4gICAgKGlucHV0KT1cIm9uTG93VGh1bWJDaGFuZ2UoJGV2ZW50KVwiXHJcbiAgICBjbGFzcz1cInRodW1iIGxvdyBsb3ctdGh1bWJcIlxyXG4gIC8+XHJcbiAgPGlucHV0XHJcbiAgICBpZD1cImhpZ2hTbGlkZXJcIlxyXG4gICAgdHlwZT1cInJhbmdlXCJcclxuICAgIFttaW5dPVwibWluXCJcclxuICAgIFttYXhdPVwibWF4XCJcclxuICAgIFt2YWx1ZV09XCJoaWdoVmFsdWVcIlxyXG4gICAgKGlucHV0KT1cIm9uSGlnaFRodW1iQ2hhbmdlKCRldmVudClcIlxyXG4gICAgY2xhc3M9XCJ0aHVtYiBoaWdoIGhpZ2gtdGh1bWJcIlxyXG4gIC8+XHJcblxyXG4gIDwhLS0gVG9vbHRpcCBmb3IgdGhlIGxlZnQgdGh1bWIgLS0+XHJcbiAgPGRpdlxyXG4gICAgY2xhc3M9XCJ0b29sdGlwIGxvdy10b29sdGlwXCJcclxuICAgIFtzdHlsZS5sZWZ0LiVdPVwiKGxvd1ZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pICogMTAwXCJcclxuICAgIFtzdHlsZS5iYWNrZ3JvdW5kXT1cImxlZnRUb29sdGlwQ29sb3JcIj5cclxuICAgIHt7IGxvd1ZhbHVlIH19XHJcbiAgPC9kaXY+XHJcblxyXG4gIDwhLS0gVG9vbHRpcCBmb3IgdGhlIHJpZ2h0IHRodW1iIC0tPlxyXG4gIDxkaXZcclxuICAgIGNsYXNzPVwidG9vbHRpcCBoaWdoLXRvb2x0aXBcIlxyXG4gICAgW3N0eWxlLmxlZnQuJV09XCIoaGlnaFZhbHVlIC0gbWluKSAvIChtYXggLSBtaW4pICogMTAwXCJcclxuICAgIFtzdHlsZS5iYWNrZ3JvdW5kXT1cInJpZ2h0VG9vbHRpcENvbG9yXCI+XHJcbiAgICB7eyBoaWdoVmFsdWUgfX1cclxuICA8L2Rpdj5cclxuPC9kaXY+XHJcbiJdfQ==